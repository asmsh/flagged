package main

type templateHeaderInput struct {
	CmdArgs     string
	PackageName string
}

type flagValue struct {
	// Field is the name of the field that Flag is generated from.
	// exactly as it appears in the SourceTypeName.
	Field string
	// Flag is the name of the flag that will be used to generate the method.
	// with no _ prefix, and upper case first char.
	Flag string
}

type templateTypeInput struct {
	SourceTypeName   string // the type we're generating flags from.
	OutTypeName      string
	OutTypeSize      int    // 8,16,32,64
	OutInterfaceName string // with no _ prefix, and upper case first char.
	// FlagValues are used to generate the fields and flag methods.
	// They are listed exactly as they appear in the SourceTypeName,
	// in the same order.
	FlagValues []flagValue
}

const flaggedHeaderTemplate = `// Code generated by "genflagged {{.CmdArgs}}"; DO NOT EDIT.
package {{.PackageName}}

import "github.com/asmsh/flagged"
`

// TODO: add some string method that makes use of the field name.
const flaggedTypeTemplate = `
{{ $SourceTypeName := .SourceTypeName -}}
{{ $OutTypeName := .OutTypeName -}}
{{ $FlagValues := .FlagValues -}}

// {{$OutTypeName}} combines all flags from [{{$SourceTypeName}}] as [flagged.BitFlags{{.OutTypeSize}}].
type {{$OutTypeName}} flagged.BitFlags{{.OutTypeSize}}

// _{{.OutInterfaceName}} includes all the methods generated for type [{{$OutTypeName}}].
type _{{.OutInterfaceName}} interface {
	BitFlags() flagged.BitFlags
	Clone() {{$OutTypeName}}
	TypedFlags() {{$SourceTypeName}}
	SetTypedFlags(flags {{$SourceTypeName}})

{{range $fv := $FlagValues}}
	Is{{$fv.Flag}}() (set bool)
{{- end}}

{{range $fv := $FlagValues}}
	Set{{$fv.Flag}}() (old bool)
{{- end}}

{{range $fv := $FlagValues}}
	Reset{{$fv.Flag}}() (old bool)
{{- end}}

{{range $fv := $FlagValues}}
	Set{{$fv.Flag}}To(new bool) (old bool)
{{- end}}

{{range $fv := $FlagValues}}
	Toggle{{$fv.Flag}}() (new bool)
{{- end}}
}

// These are the indexes of the flags used by this generated code.
// Listed in the same order their corresponding fields are listed in [{{$SourceTypeName}}].
const (
{{- range $fv := $FlagValues}}
	_{{$SourceTypeName}}{{$fv.Flag}}BitIndex flagged.BitIndex = iota // for field [{{$SourceTypeName}}.{{$fv.Field}}]
{{- end}}
)

// BitFlags returns an interface to the underlying value.
func (f *{{$OutTypeName}}) BitFlags() flagged.BitFlags {
	return (*flagged.BitFlags{{.OutTypeSize}})(f)
}

// Clone returns a copy of the current flags value.
func (f *{{$OutTypeName}}) Clone() {{$OutTypeName}} {
	return *f
}

// TypedFlags returns a copy of the current flags value inside a typed
// object, which is the same used to generate the flags in first place.
func (f *{{$OutTypeName}}) TypedFlags() {{$SourceTypeName}} {
	return {{$SourceTypeName}}{
{{- range $fv := $FlagValues}}
		{{$fv.Field}}: f.Is{{$fv.Flag}}(),
{{- end}}
	}
}

// SetTypedFlags overrides the current flags value based on the typed
// object provided.
func (f *{{$OutTypeName}}) SetTypedFlags(flags {{$SourceTypeName}}) {
{{- range $fv := $FlagValues}}
	f.Set{{$fv.Flag}}To(flags.{{$fv.Field}})
{{- end}}
}

{{range $fv := $FlagValues}}func (f *{{$OutTypeName}}) Is{{$fv.Flag}}() (set bool) {
	return f.BitFlags().Is(_{{$SourceTypeName}}{{$fv.Flag}}BitIndex)
}
{{end}}

{{range $fv := $FlagValues}}func (f *{{$OutTypeName}}) Set{{$fv.Flag}}() (old bool) {
	return f.Set{{$fv.Flag}}To(true)
}
{{end}}

{{range $fv := $FlagValues}}func (f *{{$OutTypeName}}) Reset{{$fv.Flag}}() (old bool) {
	return f.Set{{$fv.Flag}}To(false)
}
{{end}}

{{range $fv := $FlagValues}}func (f *{{$OutTypeName}}) Set{{$fv.Flag}}To(new bool) (old bool) {
	return f.BitFlags().SetTo(_{{$SourceTypeName}}{{$fv.Flag}}BitIndex, new)
}
{{end}}

{{range $fv := $FlagValues}}func (f *{{$OutTypeName}}) Toggle{{$fv.Flag}}() (new bool) {
	return f.BitFlags().Toggle(_{{$SourceTypeName}}{{$fv.Flag}}BitIndex)
}
{{end}}
`
